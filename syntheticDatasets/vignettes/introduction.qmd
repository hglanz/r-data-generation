---
title: "Generating Various Synthetic Datasets"
author: "Your Name"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Generating Various Synthetic Datasets}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

# Introduction

This vignette demonstrates how to use the functions from the `syntheticDatasets` package to generate various synthetic datasets. These datasets are suitable for different types of statistical and machine learning analyses. The functions covered in this vignette include:

1.  `make_anova`
2.  `make_regression`
3.  `make_spiral`
4.  `make_moons`
5.  `make_four_square`
6.  `make_classification`
7.  `make_circles`
8.  `make_blobs`

# 1. make_anova

The `make_anova` function generates synthetic data suitable for ANOVA (Analysis of Variance) testing. It creates a dataset with a specified number of groups, samples per group, and features, adding an optional group effect to simulate between-group differences.

## Parameters

-   **n_groups**: Number of groups to generate data for. Default is 3.
-   **n_samples_per_group**: Number of samples per group. Default is 100.
-   **n_features**: Total number of features. Default is 100.
-   **n_informative**: Number of informative features. Influences the regression target. Default is 10.
-   **bias**: Bias term in the underlying linear model. Default is 0.0.
-   **noise**: Standard deviation of the Gaussian noise applied to the output. Default is 5.0.
-   **shuffle**: Logical, indicating whether to shuffle the samples. Default is TRUE.
-   **coef**: If TRUE, the coefficients of the underlying linear model are returned. Default is FALSE.
-   **random_state**: Integer, the seed used by the random number generator for reproducibility. Can be NULL. Default is NULL.
-   **effective_rank**: The approximate number of singular vectors required to explain most of the input data by linear combinations. Relevant for 'make_regression'. Default is NULL.
-   **tail_strength**: The relative importance of the fat noisy tail of the singular values profile if 'effective_rank' is not NULL. Default is 0.5.
-   **group_effect**: The effect size to be added to each group to simulate between-group differences. Default is 10.
-   **plot**: Logical, indicating whether to plot the dataset. Default is FALSE.

## Example Usage

``` r
library(syntheticDatasets)

# Generate default ANOVA data
anova_data <- make_anova()
str(anova_data)

# Generate ANOVA data with 5 groups, each with 50 samples
custom_anova_data <- make_anova(n_groups = 5, n_samples_per_group = 50)
str(custom_anova_data)

# Apply group effects
group_effect_anova_data <- make_anova(n_groups = 3, n_samples_per_group = 100, group_effect = 20)
str(group_effect_anova_data)

# Shuffle samples
shuffled_anova_data <- make_anova(n_groups = 3, n_samples_per_group = 100, shuffle = TRUE)
str(shuffled_anova_data)

# Plot the data
make_anova(n_groups = 3, n_samples_per_group = 100, n_features = 2, plot = TRUE)
```

# 2. make_regression

The `make_regression` function generates a regression dataset suitable for testing linear regression models. It allows customization of the number of samples, features, informative features, targets, noise, and other parameters to simulate various regression scenarios.

## Parameters

-   **n_samples**: Total number of samples to generate. Default is 100.
-   **n_features**: Total number of features. Non-informative features are generated as noise. Default is 100.
-   **n_informative**: Number of informative features, i.e., features actually used to build the linear model. Default is 10.
-   **n_targets**: Number of targets (response variables) to generate. Default is 1.
-   **bias**: Intercept term in the underlying linear model. Default is 0.0.
-   **noise**: Standard deviation of Gaussian noise added to the output. Default is 0.0.
-   **shuffle**: Logical, indicating whether to shuffle the samples. Default is TRUE.
-   **coef**: Logical, indicates whether to return the coefficients of the underlying linear model along with the dataset. Default is FALSE.
-   **random_state**: Integer, the seed used by the random number generator for reproducibility. Can be `NULL`. Default is `NULL`.
-   **effective_rank**: The approximate number of singular vectors required to explain most of the input data by linear combinations. Relevant for simulating data with collinear features. Default is `NULL`.
-   **tail_strength**: The relative importance of the fat noisy tail of the singular values profile if `effective_rank` is not `NULL`. Affects how quickly the importance of singular vectors falls off. Default is 0.5.
-   **plot**: Logical, indicating whether to plot the dataset. Supported only for datasets with a single target. Default is FALSE.

## Example Usage

``` r
# Generate a simple regression dataset and plot it
simple_regression <- make_regression(plot = TRUE)

# Generate a regression dataset with more informative features and plot it
informative_regression <- make_regression(n_features=200, n_informative=50, plot=TRUE)

# Generate a multi-output regression dataset and plot it
multi_output_regression <- make_regression(n_targets=2, plot=TRUE)
```

# 3. make_spiral

The `make_spiral` function generates a two-dimensional spiral dataset, which is useful for testing clustering algorithms and visualizations.

## Example Usage

``` r
# Generate a spiral dataset
spiral_data <- make_spiral()
plot(spiral_data$x, spiral_data$y, col = spiral_data$label)
```

# 4. make_moons

The `make_moons` function generates a two-dimensional dataset with two interleaving half circles, commonly used for binary classification tasks.

## Example Usage

``` r
# Generate a moons dataset
moons_data <- make_moons()
plot(moons_data$x, moons_data$y, col = moons_data$label)
```

# 5. make_four_square

The `make_four_square` function generates a two-dimensional dataset with four clusters, arranged in a square pattern.

## Example Usage

``` r
# Generate a four square dataset
four_square_data <- make_four_square()
plot(four_square_data$x, four_square_data$y, col = four_square_data$label)
```

# 6. make_classification

The `make_classification` function generates a random multi-class classification problem.

## Example Usage

``` r
# Generate a classification dataset
classification_data <- make_classification()
plot(classification_data$x, classification_data$y, col = classification_data$label)
```

# 7. make_circles

The `make_circles` function generates a large circle containing a smaller circle in two dimensions.

## Example Usage

``` r
# Generate a circles dataset
circles_data <- make_circles()
plot(circles_data$x, circles_data$y, col = circles_data$label)
```

# 8. make_blobs

The `make_blobs` function generates isotropic Gaussian blobs for clustering.

## Example Usage

``` r
# Generate a blobs dataset
blobs_data <- make_blobs()
plot(blobs_data$x, blobs_data$y, col = blobs_data$label)
```

# Conclusion

The `syntheticDatasets` package provides a variety of functions to generate synthetic datasets for different types of analyses. These functions allow customization of various parameters to suit specific testing needs, making them valuable tools for statistical and machine learning research.

For more details on each function, refer to the respective documentation files.
