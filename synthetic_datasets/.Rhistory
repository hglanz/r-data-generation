make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
# Generate circle
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]  # remove the last element to avoid point duplication
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", main = "Generated Circles")
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2, pch = 1)
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2")
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2, pch = 1, position = "dodge")
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2")
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2, pch = 2, position = "dodge")
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2")
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2, pch = 6, position = "dodge")
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2, pch = 1)
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2, )
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2,pch = 16 )
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE)
result <- make_circles(noise = plot = TRUE, shuffle = FALSE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2,pch = 16 )
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE, shuffle = FALSE)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2,pch = 16 )
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE, shuffle = FALSE, noise = 0.8)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2,pch = 16 )
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE, shuffle = FALSE, noise = 0.2)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# Add noise if specified
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# Shuffle the data if specified
if (shuffle) {
data <- data[sample(n_samples), ]
}
# Create labels
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2,pch = 16 )
}
return(list("data" = data, "labels" = labels))
}
# Example usage
result <- make_circles(plot = TRUE, shuffle = FALSE, noise = 0.05)
result
result <- make_circles(plot = TRUE, shuffle = TRUE, noise = 0.05)
result
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2 ,pch = 16 )
}
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
# sampling in radians
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# adding noise
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# shuffle
if (shuffle) {
data <- data[sample(n_samples), ]
}
# create labels 1 and 2 for the two classes
# labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2 ,pch = 16 )
}
return(list("data" = data))
}
result <- make_circles(plot = TRUE, shuffle = TRUE, noise = 0.05)
make_circles <- function(n_samples = 100, shuffle = TRUE, noise = NULL, random_state = NULL, factor = 0.8, plot = FALSE) {
if (!is.null(random_state)) {
set.seed(random_state)
}
# sampling in radians
t <- seq(0, 2*pi, length.out = n_samples / 2 + 1)
t <- t[-length(t)]
circle_outer <- cbind(cos(t), sin(t))
circle_inner <- factor * circle_outer
# Combine the circles
data <- rbind(circle_outer, circle_inner)
# adding noise
if (!is.null(noise)) {
data <- data + matrix(rnorm(2 * n_samples, sd = noise), ncol = 2)
}
# shuffle
if (shuffle) {
data <- data[sample(n_samples), ]
}
# create labels 1 and 2 for the two classes
labels <- c(rep(1, n_samples / 2), rep(2, n_samples / 2))
if (plot) {
plot(data, col = labels, asp = 1, xlab = "Feature 1", ylab = "Feature 2", pch = 16)
legend("topright", legend = c("Outer Circle", "Inner Circle"), col = 1:2 ,pch = 16 )
}
return(list("data" = data, "labels" = labels))
}
result <- make_circles(plot = TRUE, shuffle = TRUE, noise = 0.05)
